<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qin_hu.gitee.io/blog/</id>
    <title>禾耳</title>
    <updated>2024-04-25T05:19:42.254Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qin_hu.gitee.io/blog/"/>
    <link rel="self" href="https://qin_hu.gitee.io/blog/atom.xml"/>
    <subtitle>逆风的方向，更适合飞翔。</subtitle>
    <logo>https://qin_hu.gitee.io/blog/images/avatar.png</logo>
    <icon>https://qin_hu.gitee.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2024, 禾耳</rights>
    <entry>
        <title type="html"><![CDATA[【nuxt】开发指南]]></title>
        <id>https://qin_hu.gitee.io/blog/post/nuxt-kai-fa-zhi-nan/</id>
        <link href="https://qin_hu.gitee.io/blog/post/nuxt-kai-fa-zhi-nan/">
        </link>
        <updated>2024-04-23T05:11:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-安装">1. 安装</h1>
<pre><code>git clone -b v3 https://github.com/nuxt/starter.git nuxt3-app
</code></pre>
<h1 id="2-目录结构">2.  目录结构</h1>
<p>https://nuxt.com.cn/docs/guide/directory-structure</p>
<figure data-type="image" tabindex="1"><img src="https://qin_hu.gitee.io/blog//post-images/1713950119932.png" alt="" loading="lazy"></figure>
<h1 id="3-新建路由">3. 新建路由</h1>
<h2 id="1-新建页面">1.  新建页面</h2>
<p>在项目目录新建<code>pages</code>文件夹, <code>pages</code>文件夹中新建页面。<br>
例如要创建首页路由<code>/</code>, 我们可以在pages路由中创建 <code>/index/index.vue</code></p>
<table>
<thead>
<tr>
<th>路由</th>
<th>目录</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>/index/index.vue</td>
</tr>
<tr>
<td>/about</td>
<td>/about/index.vue</td>
</tr>
</tbody>
</table>
<h2 id="2-入口文件中显示页面">2. 入口文件中显示页面</h2>
<p>在pages目录下创建页面路由文件，然后在入口文件<code>App.vue</code>中使用<code> &lt;NuxtPage /&gt;</code>组件显示页面</p>
<p><code> App.vue</code></p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;!-- &lt;NuxtWelcome /&gt; --&gt;
    &lt;NuxtPage /&gt;
  &lt;/div&gt;
&lt;/template&gt;

</code></pre>
<h1 id="4-布局">4. 布局</h1>
<h2 id="1-使用nuxtlayout启动布局">1. 使用<code>NuxtLayout</code>启动布局</h2>
<p>name: 指定要渲染的布局名称，可以是字符串、响应式引用或计算属性。它必须与 layouts/ 目录中相应布局文件的名称匹配。</p>
<p><code>App.vue</code></p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
// layouts/custom.vue
const layout = 'custom'
&lt;/script&gt;

&lt;template&gt;
  &lt;NuxtLayout :name=&quot;layout&quot;&gt;
    &lt;NuxtPage /&gt;
  &lt;/NuxtLayout&gt;
&lt;/template&gt;
</code></pre>
<h2 id="2-页面中需要指定布局">2. 页面中需要指定布局</h2>
<p><code>pages/index/index.vue</code></p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
definePageMeta({
  layout: 'layout'
})
&lt;/script&gt;
</code></pre>
<h1 id="5-css">5. css</h1>
<p><code>/assets/css/style.less</code> ： 自定义全局css样式</p>
<p><code>/assets/css/media.less</code> ： 响应式css样式</p>
<p><code>main.css</code> : css入口文件</p>
<pre><code>@import url('~/assets/css/style.less');
@import url('~/assets/css/media.less');
</code></pre>
<h1 id="6-utils">6. utils</h1>
<p>https://nuxt.com.cn/docs/guide/directory-structure/utils</p>
<h2 id="方法1-使用命名导出">方法1： 使用命名导出</h2>
<p><code>utils/index.ts</code></p>
<pre><code>export const { format: formatNumber } = Intl.NumberFormat('en-GB', {
  notation: 'compact',
  maximumFractionDigits: 1
})
</code></pre>
<h2 id="方法2-使用默认导出">方法2： 使用默认导出</h2>
<p><code>utils/random-entry.ts 或 utils/randomEntry.ts</code></p>
<pre><code>// 它将作为randomEntry()可用（文件名的驼峰形式，不包括扩展名）
export default function (arr: Array&lt;any&gt;) {
  return arr[Math.floor(Math.random() * arr.length)]
}

</code></pre>
<h2 id="使用">使用</h2>
<p>现在你可以在.js、.ts和.vue文件中使用自动导入的工具函数了。<br>
<code>app.vue</code></p>
<pre><code>&lt;template&gt;
  &lt;p&gt;{{ formatNumber(1234) }}&lt;/p&gt;
&lt;/template&gt;
</code></pre>
<h1 id="7-静态图片">7. 静态图片</h1>
<p>图片保存在&quot;~/assets/images/&quot;目录下。</p>
<p>使用<code>images['图片名称']</code>引入图片。</p>
<pre><code>&lt;template&gt;
  &lt;img :src=&quot;images['close']&quot; alt=&quot;&quot; srcset=&quot;&quot;&gt;
&lt;/template&gt;

&lt;script setup lang=&quot;ts&quot;&gt;
definePageMeta({
  layout: &quot;layout&quot;,
});
&lt;/script&gt;
</code></pre>
<h1 id="参考链接">参考链接</h1>
<p>https://nuxt.com.cn/docs/guide</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【leafletJs】基本使用]]></title>
        <id>https://qin_hu.gitee.io/blog/post/leafletjs-ji-ben-shi-yong/</id>
        <link href="https://qin_hu.gitee.io/blog/post/leafletjs-ji-ben-shi-yong/">
        </link>
        <updated>2024-04-16T09:36:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装">安装</h1>
<h2 id="1-下载leaflet">1. 下载leaflet</h2>
<pre><code>npm i leaflet
</code></pre>
<h2 id="2-入口文件引入leafletjs的样式">2. 入口文件引入leafletJs的样式</h2>
<pre><code>import &quot;leaflet/dist/leaflet.css&quot;;
</code></pre>
<h1 id="使用">使用</h1>
<h2 id="1-封装组件">1. 封装组件</h2>
<p>基于vue封装的一个基础展示地图的组件 ：<code>LeafletMap.vue</code></p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import L from &quot;leaflet&quot;;
interface Props {
  isGetLocation: boolean;
  width?: string;
  height?: string;
  latitude?: number;
  longitude?: number;
}
const props = withDefaults(defineProps&lt;Props&gt;(), {
  isGetLocation: false,
  width: &quot;100vw&quot;,
  height: &quot;100vh&quot;,
  latitude: 0,
  longitude: 0,
});
onMounted(async () =&gt; {
  if (props.latitude &amp;&amp; props.longitude) {
    loadMap({
      latitude: props.latitude,
      longitude: props.longitude,
    });
    return;
  }
  if (props.isGetLocation) {
    const res = await getPostion();
    if (res.coords) {
      loadMap({
        latitude: res.coords.latitude,
        longitude: res.coords.longitude,
      });
      return;
    }
  }
  loadMap({});
});
function getPostion() {
  return new Promise((res, rej) =&gt; {
    if (&quot;geolocation&quot; in navigator) {
      /* geolocation 存在 */
      function success(position) {
        res(position);
      }

      function error() {
        rej(&quot;Sorry, no position available.&quot;);
        alert(&quot;Sorry, no position available.&quot;);
      }

      const options = {
        enableHighAccuracy: true,
        // maximumAge: 30000,
        // timeout: 27000,
      };
      const watchID = navigator.geolocation.watchPosition(
        success,
        error,
        options,
      );
    } else {
      return 0;
      /* geolocation 不存在 */
    }
  });
}
function loadMap({ latitude, longitude }) {
  // 创建实例
  var map = L.map(&quot;map&quot;).setView([latitude || 0, longitude || 0], 13);
  // 获取地图片
  L.tileLayer(&quot;http://{s}.tile.osm.org/{z}/{x}/{y}.png&quot;).addTo(map);
  // 显示定位图表
  L.marker([latitude || 0, longitude || 0])
    .addTo(map)
    // .bindPopup(&quot;marker&quot;)
    .openPopup();
}
&lt;/script&gt;

&lt;template&gt;
  &lt;div&gt;
    &lt;div :style=&quot;{ width: width, height: height }&quot; id=&quot;map&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;
</code></pre>
<p>支持传经纬度，通过获取定位显示位置。</p>
<h2 id="2-使用组件">2. 使用组件</h2>
<pre><code>    &lt;leaflet-map 
    isGetLocation
    width=&quot;100vw&quot;
    height=&quot;100vh&quot;
    &gt;
    &lt;/leaflet-map&gt;
</code></pre>
<iframe src="https://f3gywl-5173.csb.app/" width="100%" height="350px">]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[seo优化]]></title>
        <id>https://qin_hu.gitee.io/blog/post/seo-you-hua/</id>
        <link href="https://qin_hu.gitee.io/blog/post/seo-you-hua/">
        </link>
        <updated>2024-04-16T03:55:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-使用meta标签和语义化的代码">1. 使用meta标签和语义化的代码</h1>
<pre><code>  &lt;head&gt;
    &lt;meta name=&quot;description&quot; content=&quot;网站名称&quot;&gt;
    &lt;meta name=&quot;keywords&quot; content=&quot;网站名称，网站,名称&quot;&gt;
    &lt;meta name=&quot;anthor&quot; content=&quot;禾耳&quot;&gt;
    &lt;meta name=&quot;robots&quot; content=&quot;网站名称，网站,名称&quot;&gt;
    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;网站名称，网站,名称&quot;&gt;
    &lt;meta name=&quot;application-name&quot; content=&quot;网站名称，网站,名称&quot;&gt;
    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=yes&quot;&gt;
    &lt;title&gt;网站名称，网站,名称&lt;/title&gt;
  &lt;/head&gt;
</code></pre>
<h1 id="2-使用ssr服务端渲染-server-side-rendering">2. 使用SSR服务端渲染（ Server-Side Rendering）</h1>
<h1 id="3-预渲染prerender-spa-plugin">3. 预渲染prerender-spa-plugin</h1>
<blockquote>
<p>使用 prerender-spa-plugin 插件来实现预渲染页面，在构建时就针对特定的路有生成静态的 html 文件</p>
</blockquote>
<p><a href="https://juejin.cn/post/7349752708385816630">参考链接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue常见提醒报错]]></title>
        <id>https://qin_hu.gitee.io/blog/post/vue-chang-jian-ti-xing-bao-cuo/</id>
        <link href="https://qin_hu.gitee.io/blog/post/vue-chang-jian-ti-xing-bao-cuo/">
        </link>
        <updated>2024-04-11T04:40:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-vue-warn-property-showhandle-was-accessed-during-render-but-is-not-defined-on-instance">1.  [Vue warn]: Property &quot;showHandle&quot; was accessed during render but is not defined on instance.</h1>
<pre><code>[VUE WARN]：在呈现期间访问了属性，但未在实例上定义该属性。
</code></pre>
<p>原因 :模板中使用到了响应式变量，但是未定义这个响应式变量</p>
<pre><code>&lt;template v-if=&quot;showHandle&quot;&gt;
&lt;/template&gt;
</code></pre>
<p>解决方案:声明这个变量</p>
<pre><code>const showHandle=ref(false)
</code></pre>
<p>在没有声明变量，事件等情况使用到都会报这个提醒错误。</p>
<h1 id="2-vue-warn-missing-required-prop-modelvlaue">2. [Vue warn]: Missing required prop: &quot;modelVlaue&quot;</h1>
<pre><code>[VUE WARN]：缺少必需的道具：“ModelValue”
</code></pre>
<p>原因：自定义组件中设置了必填prop<br>
解决方案：将model设置为非必填或者在组件使用<br>
时正确传入prop属性</p>
<pre><code>interface Props {
  modelVlaue?: boolean;
}
// 或者
&lt;component v-model=&quot;value&quot; /&gt;
</code></pre>
<h1 id="3-vue-warn-write-operation-failed-computed-value-is-readonly">3. [Vue warn] Write operation failed: computed value is readonly</h1>
<pre><code>[VUE WARN]写入操作失败：计算值为只读
</code></pre>
<p>原因：更改了计算属性值。<br>
我出现这个错误原因主要是自定义组件中使用第三方组件响应式变量绑定的计算属性。<br>
应该不使用受控的双向绑定，而是使用<code>model-value</code>替代<code>v-model</code></p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { computed } from &quot;vue&quot;;
interface Props {
  modelVlaue?: boolean;
}
const props = withDefaults(defineProps&lt;Props&gt;(), {
  modelVlaue: false,
});
const emit = defineEmits([&quot;update:modelValue&quot;, &quot;cancel&quot;, &quot;confirm&quot;]);
const dialogVisible = computed(() =&gt; {
  return props.modelVlaue;
});
const cancel = () =&gt; {
  emit(&quot;update:modelValue&quot;, false);
  emit(&quot;cancel&quot;, false);
};
&lt;/script&gt;

&lt;template&gt;
&lt;!--  (X)错误写法:使用了v-model 绑定了计算属性
  &lt;el-drawer
    :show-close=&quot;false&quot;
    @close=&quot;cancel&quot;
    v-model=&quot;dialogVisible&quot;
    :model-value=&quot;dialogVisible&quot;
  &gt;
  &lt;/el-drawer&gt;
 --&gt;
 &lt;!-- (V) --&gt;
  &lt;el-drawer
    :show-close=&quot;false&quot;
    @close=&quot;cancel&quot;
    :model-value=&quot;dialogVisible&quot;
  &gt;
  &lt;/el-drawer&gt;
&lt;/template&gt;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux安装docker/docker-compose]]></title>
        <id>https://qin_hu.gitee.io/blog/post/linux-an-zhuang-dockerdocker-compose/</id>
        <link href="https://qin_hu.gitee.io/blog/post/linux-an-zhuang-dockerdocker-compose/">
        </link>
        <updated>2024-03-22T10:47:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker">docker</h1>
<p>执行一下命令，安装最新版本的 Docker Engine-Community 和 containerd。</p>
<pre><code>sudo yum install -y docker-ce docker-ce-cli containerd.io
</code></pre>
<p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。但安装完成之后的默认是未启动的，需要进行启动操作。</p>
<ul>
<li>
<p>判断docker是否安装成功<br>
<code>docker -v</code></p>
</li>
<li>
<p>设置开机自启动<br>
<code>systemctl enable docker </code></p>
</li>
</ul>
<h1 id="docker-compose">docker-compose</h1>
<pre><code>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
 
# 比较新的版本2.23.0
# sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
</code></pre>
<pre><code>sudo chmod +x /usr/local/bin/docker-compose
</code></pre>
<pre><code>docker-compose --version  #查看 docker-compose 版本
</code></pre>
<h1 id="docker启动">Docker启动</h1>
<p>启动Docker的命令：<br>
<code>sudo systemctl start docker</code></p>
<ul>
<li>通过运行<code>hello-world</code>镜像来验证是否正确安装了Docker Engine-Community。</li>
</ul>
<pre><code>// 拉取镜像
sudo docker pull hello-world
// 执行hello-world
sudo docker run hello-world
</code></pre>
<p>如果执行之后，控制台显示如下信息，则说明Docker安装和启动成功：</p>
<pre><code>[root@iZ8vb8pfb2awsz4qy7vm7qZ ~]# docker run hello-world

Hello from Docker!
This message shows that your installation appears to be working correctly.
……
</code></pre>
<ul>
<li>除了启动Docker，一些其他启动相关的命令：</li>
</ul>
<p>守护进程重启：<code>systemctl daemon-reload</code><br>
重启Docker服务：<code>systemctl restart docker / service docker restart</code><br>
关闭Docker服务：<code>docker service docker stop / docker systemctl stop docker</code></p>
<h1 id="删除docker">删除Docker</h1>
<p>删除安装包：<br>
<code>yum remove docker-ce</code><br>
删除镜像、容器、配置文件等内容：<br>
<code>rm -rf /var/lib/docker</code></p>
<h1 id="docker其他常见命令">Docker其他常见命令</h1>
<p>安装完成Docker之后，这里汇总列一下常见的Docker操作命令：<br>
搜索仓库镜像：<code>docker search 镜像名</code><br>
拉取镜像：<code>docker pull 镜像名</code><br>
查看正在运行的容器：<code>docker ps</code><br>
查看所有容器：<code>docker ps -a</code><br>
删除容器：<code>docker rm container_id</code><br>
查看镜像：<code>docker images</code><br>
删除镜像：<code>docker rmi image_id</code><br>
启动（停止的）容器：<code>docker start 容器ID</code><br>
停止容器：<code>docker stop  容器ID</code><br>
重启容器：<code>docker restart 容器ID</code><br>
启动（新）容器：<code>docker run -it ubuntu /bin/bash</code><br>
进入容器：<code>docker attach 容器ID</code>或<code>docker exec -it 容器ID /bin/bash</code>，推荐使用后者。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【d3Js】基本使用]]></title>
        <id>https://qin_hu.gitee.io/blog/post/d3js-ji-ben-shi-yong/</id>
        <link href="https://qin_hu.gitee.io/blog/post/d3js-ji-ben-shi-yong/">
        </link>
        <updated>2024-03-05T07:14:08.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://doc.yonyoucloud.com/doc/wiki/project/d3wiki/index.html">学习文档</a></p>
<p><a href="https://www.cnblogs.com/zhinian-/p/12575441.html">https://www.cnblogs.com/zhinian-/p/12575441.html</a></p>
<h1 id="1-helloworld">1. HelloWorld</h1>
<h2 id="1-1-没有子节点时插入标签">1-1， 没有子节点时插入标签</h2>
<p>select选择标签，selectAll选择标签下的子集，append插入节点，text插入文本</p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;
onMounted(() =&gt; {
    select(&quot;.main&quot;).append(&quot;p&quot;).text(&quot;hello world&quot;);
});
defineProps&lt;{ msg: string }&gt;();
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;
</code></pre>
<h2 id="1-2-有子节点时插入标签">1-2. 有子节点时插入标签</h2>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;
onMounted(() =&gt; {
  select(&quot;.main&quot;).selectAll(&quot;p&quot;).text(&quot;hello world&quot;);
});
defineProps&lt;{ msg: string }&gt;();
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;

</code></pre>
<pre><code>d3.select()：是选择所有指定元素的第一个
d3.selectAll()：是选择指定元素的全部
</code></pre>
<h1 id="2-绑定数据">2. 绑定数据</h1>
<h2 id="2-1-datum">2-1. datum</h2>
<p>将数据重复绑定到节点。<br>
先选中节点，在使用<code>datum</code>绑定到api节点</p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;
/**
 * 2. 绑定数据
 */
// 2-1. datum 将数据重复绑定到节点
let str = `hello world`;
onMounted(() =&gt; {
  select(&quot;.main&quot;)
    .selectAll(&quot;p&quot;)
    .datum(str)
    .text((d, i) =&gt; {
      return `第${i}个元素,${d}`;
    });
});
defineProps&lt;{ msg: string }&gt;();
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;

</code></pre>
<h2 id="2-2-data">2-2. data</h2>
<p>将数据集合分别绑定到节点</p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;
/**
 * 2. 绑定数据
 */
// 2-2.data 将数据集合分别绑定到节点
const data = [1, 2, 3, 4];
onMounted(() =&gt; {
  select(&quot;.main&quot;)
    .selectAll(&quot;p&quot;)
    .data(data)
    .text((d, i) =&gt; {
      return `第${i}个元素,${d}`;
    });
});
defineProps&lt;{ msg: string }&gt;();
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;

</code></pre>
<p>text方法循环遍历：</p>
<pre><code>// d代表值，i代表索引
text((d, i) =&gt; {
      return `第${i}个元素,${d}`;
    });
</code></pre>
<h1 id="3-插入元素">3. 插入元素</h1>
<p>append向后插入元素<br>
insert向前插入元素</p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;
/**
 * 3. 插入元素
 */
// 3-1. append
onMounted(() =&gt; {
  select(&quot;.main&quot;).append(&quot;span&quot;).text(&quot;往后插入元素&quot;);
});
// 3-2.insert
onMounted(() =&gt; {
  select(&quot;.main&quot;).insert(&quot;span&quot;).text(&quot;往前插入元素&quot;);
});
defineProps&lt;{ msg: string }&gt;();
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;

</code></pre>
<h1 id="4-删除节点">4. 删除节点</h1>
<p>remove()</p>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;
/**
 * 4. 删除元素
 */
function del() {
  select(&quot;.isme&quot;).remove();
}
defineProps&lt;{ msg: string }&gt;();
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;
    &lt;button @click=&quot;del&quot;&gt;删除p节点1&lt;/button&gt;
    &lt;p class=&quot;isme&quot;&gt;1&lt;/p&gt;
    &lt;p&gt;3&lt;/p&gt;
    &lt;p&gt;4&lt;/p&gt;
    &lt;p&gt;5&lt;/p&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;


</code></pre>
<h1 id="5-元素与数据数量对应的标记回调">5. 元素与数据数量对应的标记回调</h1>
<h2 id="5-1-默认情况">5-1. 默认情况</h2>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;

/**
 * @desc 元素与数据数量对应的标记回调
 */
// 1. 默认情况 绑定数据数量=对应数量
onMounted(() =&gt; {
  let data = [1, 2, 3, 4];
  selectAll(&quot;p&quot;)
    .data(data)
    .text((d, i) =&gt; {
      return `第${i}个元素,${d}`;
    })
});
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;
    &lt;p class=&quot;isme&quot;&gt;1&lt;/p&gt;
    &lt;p&gt;3&lt;/p&gt;
    &lt;p&gt;4&lt;/p&gt;
    &lt;p&gt;5&lt;/p&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;

</code></pre>
<h2 id="5-2-enter-绑定数据数量对应数量">5-2.  enter 绑定数据数量&gt;对应数量</h2>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;

/**
 * @desc 元素与数据数量对应的标记回调
 */
// 1. 默认情况 绑定数据数量=对应数量
onMounted(() =&gt; {
  let data = [1, 2, 3, 4, 5];
  select(&quot;.main&quot;)
    .selectAll(&quot;p&quot;)
    .data(data)
    .text((d, i) =&gt; {
      return `第${i}个元素,${d}`;
    })
    .enter()
    // 处理多余数据
    .append(&quot;p&quot;)
    .text((d, i) =&gt; {
      console.info(d);
      return d;
    });
});
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;
    &lt;p class=&quot;isme&quot;&gt;1&lt;/p&gt;
    &lt;p&gt;3&lt;/p&gt;
    &lt;p&gt;4&lt;/p&gt;
    &lt;p&gt;5&lt;/p&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;

</code></pre>
<h2 id="5-3-exit-当对应的元素过多时-绑定数据数量-对应元素">5-3. exit() 当对应的元素过多时 （ 绑定数据数量 &lt; 对应元素 ）</h2>
<pre><code>&lt;script setup lang=&quot;ts&quot;&gt;
import { ref, onMounted } from &quot;vue&quot;;
import { select, selectAll } from &quot;d3&quot;;

/**
 * @desc 元素与数据数量对应的标记回调
 */
// 3. exit 绑定数据数量 &lt; 对应元素
onMounted(() =&gt; {
  let data = [1, 2, 3];
  select(&quot;.main&quot;)
    .selectAll(&quot;p&quot;)
    .data(data)
    .text((d, i) =&gt; {
      return `第${i}个元素,${d}`;
    })
    .exit()
    // 处理多余元素
    .remove();
});
&lt;/script&gt;

&lt;template&gt;
  &lt;div class=&quot;main&quot;&gt;
    &lt;p class=&quot;isme&quot;&gt;1&lt;/p&gt;
    &lt;p&gt;3&lt;/p&gt;
    &lt;p&gt;4&lt;/p&gt;
    &lt;p&gt;5&lt;/p&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;&lt;/style&gt;

</code></pre>
<h1 id="6-画图">6. 画图</h1>
<p>先了解一下svg标签组成<br>
直角坐标系原点在网页窗口左上角，水平向右是x轴正轴，垂直向下是y轴正轴。<br>
<img src="https://pic4.zhimg.com/v2-2a434e92abfed75eec8adaea80387e0f_r.jpg" alt="" loading="lazy"></p>
<h2 id="6-1-矩形rect">6-1. 矩形（rect）</h2>
<pre><code>onMounted(() =&gt; {
  const svg = select(&quot;svg&quot;);
  svg
    // 设置画布宽高
    .attr(&quot;width&quot;, 500)
    .attr(&quot;height&quot;, 500)
    // 设置矩形
    .append(&quot;rect&quot;)
    .attr(&quot;width&quot;, 100)
    .attr(&quot;height&quot;, 100)
    // 位置
    .attr(&quot;x&quot;, 0)
    .attr(&quot;y&quot;, 0)
    .attr(&quot;fill&quot;, &quot;blue&quot;);
});
</code></pre>
<h2 id="6-2-画一个圆circle">6-2. 画一个圆(circle)</h2>
<pre><code>onMounted(() =&gt; {
  const data = [1, 2, 3];
  select(&quot;.main&quot;)
    .selectAll(&quot;svg&quot;)
    .attr(&quot;width&quot;, 500)
    .attr(&quot;height&quot;, 500)
    .append(&quot;circle&quot;)
    .attr(&quot;cx&quot;, 100)
    .attr(&quot;cy&quot;, 100)
    .attr(&quot;r&quot;, 50)
    .attr(&quot;fill&quot;, &quot;red&quot;)
    .text(&quot;nihaa&quot;)
    .color(&quot;red&quot;);
});
</code></pre>
<h2 id="6-3-画一个三角形-polygon">6-3. 画一个三角形 (polygon)</h2>
<pre><code>onMounted(() =&gt; {
  // 创建 SVG 元素
  var svg = select(&quot;.main&quot;)
    .selectAll(&quot;svg&quot;)
    .attr(&quot;width&quot;, 200)
    .attr(&quot;height&quot;, 200);

  // 定义三角形a,b,c三个顶点的坐标
  var points = &quot;20,20 20,100 120,100&quot;;
  // 绘制三角形 使用polygon多边形
  svg
    .append(&quot;polygon&quot;)
    .attr(&quot;points&quot;, points)
    .style(&quot;fill&quot;, &quot;yellow&quot;)
    .style(&quot;stroke&quot;, &quot;red&quot;);
});
</code></pre>
<h2 id="6-4-画一个线line">6-4. 画一个线(line)</h2>
<pre><code>onMounted(() =&gt; {
  select(&quot;.main&quot;)
    .selectAll(&quot;svg&quot;)
    .attr(&quot;width&quot;, 200)
    .attr(&quot;height&quot;, 200)
    // 直线
    .append(&quot;line&quot;)
    .attr(&quot;x1&quot;, 50)
    .attr(&quot;y1&quot;, 50)
    .attr(&quot;x2&quot;, 120)
    .attr(&quot;y2&quot;, 120)
    .attr(&quot;stroke&quot;, &quot;red&quot;)
    .attr(&quot;stroke-width&quot;, 1);
});
</code></pre>
<h1 id="6-拖拽">6. 拖拽</h1>
<pre><code>  /**
     * @desc 元素实现拖拽  = 适合单个元素拖拽
     */
    elementDrag({
        element,
        key,
        onDragStart,
        onDragEnd,
        onDrag
    }) {
        let currentSvg = null;
        if (element) {
            currentSvg = element
        } else {
            currentSvg = d3.select(`[key=${key}]`)
        }
        const dragBehavior = d3.drag()
            .on(&quot;start&quot;, function (event) {
                const x = event.x;
                const y = event.y;
                currentSvg.attr(&quot;x&quot;, x);
                currentSvg.attr(&quot;y&quot;, y);

                onDragStart(event)
                // console.log(&quot;拖拽开始&quot;, event);
            })
            .on(&quot;drag&quot;, (event) =&gt; {
                // 根据拖拽的行为更新矩形的位置
                onDrag(event)
                let x = event.x;
                let y = event.y;
                console.info(event.x, event.y)
                // currentSvg.attr(&quot;x&quot;, x);
                // currentSvg.attr(&quot;y&quot;, y);
                // 限制矩形不超出SVG画布边界
                const svgWidth = Number(this.svg.attr('width'));
                const svgHeight = Number(this.svg.attr('height'));
                const ractWidth = Number(currentSvg.attr('height'));
                const ractHeight = Number(currentSvg.attr('height'));
                x = Math.min(Math.max(x, 0), svgWidth - ractWidth);
                y = Math.min(Math.max(y, 0), svgHeight - ractHeight);
                currentSvg.attr(&quot;x&quot;, x);
                currentSvg.attr(&quot;y&quot;, y);
                currentSvg.transition()
                    .duration(500)
            })
            .on(&quot;end&quot;, function (event) {
                onDragEnd(event)
                console.log(&quot;拖拽结束&quot;, event);
                currentSvg.attr(&quot;x&quot;, event.x);
                currentSvg.attr(&quot;y&quot;, event.y);
            })
        // 应用拖拽行为到矩形
        currentSvg.call(dragBehavior);
    }
    /**
     * @desc 获取拖拽实例 用于多个拖拽时处罚
     * 
     */ 
    getDragBehavior({
        onDragStart,
        onDragEnd,
        onDrag
    }) {
        const that=this;
        return d3.drag()
            .on(&quot;start&quot;, function (event, d) {
                onDragStart(event)
                d3.select(this).raise().classed(&quot;active&quot;, true);
            })
            .on(&quot;drag&quot;, function (event, d) {
                // 计算新位置
                d.x = parseFloat(d.x) + event.dx;
                d.y = parseFloat(d.y) + event.dy;
                console.info('MyD3.svg',that.svg)
                // 限制矩形不超出SVG画布边界
                const svgWidth = Number(that.svg.attr('width'));
                const svgHeight = Number(that.svg.attr('height'));
                const ractWidth = d.width;
                const ractHeight = d.height;
                d.x = Math.min(Math.max(d.x, 0), svgWidth - ractWidth);
                d.y = Math.min(Math.max(d.y , 0), svgHeight - ractHeight);
                // 更新位置
                d3.select(this)
                    .attr(&quot;x&quot;, d.x)
                    .attr(&quot;y&quot;, d.y);
                onDrag(event)
            })
            .on(&quot;end&quot;, function (event, d) {
                onDragEnd(event)
                d3.select(this).classed(&quot;active&quot;, false);
            })
    }
</code></pre>
<h1 id="7-力导向图">7. 力导向图</h1>
<p><code>d3.forceSimulation</code>是D3.js中用于创建和控制力导向图的函数。它通过模拟物理力的作用（如引力、斥力等）来对节点进行布局。这里是一些基本的参数和概念介绍：</p>
<h2 id="创建力模拟">创建力模拟</h2>
<p>当你创建一个力模拟时，可以传递一个节点数组给<code>d3.forceSimulation(nodes)</code>，其中<code>nodes</code>是包含节点数据的数组。每个节点至少包含节点的唯一标识符。</p>
<pre><code class="language-javascript">var simulation = d3.forceSimulation(nodes);
</code></pre>
<h2 id="力">力</h2>
<p>力模拟中的“力”用于定义节点如何相互作用。D3提供了多种内置力的类型，每种力都有其特定的参数和作用。</p>
<ul>
<li><strong>d3.forceLink(links)</strong>：根据链接数组创建链接力，用于连接节点。可以设置链接的距离和强度。</li>
<li><strong>d3.forceManyBody()</strong>：创建多体力，用于模拟节点之间的引力或斥力。</li>
<li><strong>d3.forceCenter(x, y)</strong>：创建一个力，将节点向指定的中心点(x, y)吸引。</li>
<li><strong>d3.forceCollide([radius])</strong>：创建一个碰撞力，防止节点重叠，可以指定碰撞半径。</li>
</ul>
<h3 id="力的参数">力的参数</h3>
<p>每种力都有其特定的参数，可以通过链式调用的方式设置。例如，为链接力设置距离：</p>
<pre><code class="language-javascript">simulation.force(&quot;link&quot;, d3.forceLink(links).distance(50));
</code></pre>
<h2 id="节点和链接的数据结构">节点和链接的数据结构</h2>
<ul>
<li><strong>节点</strong>（nodes）：通常是一个对象数组，每个对象代表图中的一个节点。节点对象可以包含任意属性，但是力模拟会添加一些特定的属性，如<code>x</code>、<code>y</code>（节点的当前位置）、<code>vx</code>、<code>vy</code>（节点的当前速度）等。</li>
<li><strong>链接</strong>（links）：表示节点之间的连接，通常也是一个对象数组。每个对象代表一个链接，至少包含<code>source</code>和<code>target</code>属性，这些属性指向节点数组中的节点或节点的索引。</li>
</ul>
<h2 id="更新和控制模拟">更新和控制模拟</h2>
<p>力模拟提供了控制其行为的方法，如<code>simulation.alpha(target)</code>用于设置模拟的冷却参数，<code>simulation.restart()</code>用于重启模拟等。</p>
<h2 id="事件监听">事件监听</h2>
<p>可以监听力模拟的事件，如<code>tick</code>事件，在每个模拟步骤时执行特定的操作，通常用于更新节点和链接的位置。</p>
<pre><code class="language-javascript">simulation.on(&quot;tick&quot;, function() {
    // 更新节点和链接的位置
});
</code></pre>
<p>通过组合不同的力和调整它们的参数，你可以创建复杂且动态的力导向图表现。</p>
<h1 id="8-d3js的一些技巧">8. d3Js的一些技巧</h1>
<h2 id="1-力导向图元素定位技巧">1. 力导向图元素定位技巧</h2>
<ol>
<li>监听拖拽</li>
<li>监听力方法</li>
<li>创建时的更新位置</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nvm的使用]]></title>
        <id>https://qin_hu.gitee.io/blog/post/nvm-de-shi-yong/</id>
        <link href="https://qin_hu.gitee.io/blog/post/nvm-de-shi-yong/">
        </link>
        <updated>2024-02-22T02:00:37.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html">nvm安装文档</a></p>
<h1 id="下载">下载</h1>
<ul>
<li>windows</li>
</ul>
<p><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p>
<h1 id="下载node">下载node</h1>
<pre><code>nvm install 18.8.0
</code></pre>
<h1 id="使用指定版本">使用指定版本</h1>
<pre><code>nvm use 18.8.0
</code></pre>
<h1 id="列出已安装的实例">列出已安装的实例</h1>
<pre><code>nvm ls
</code></pre>
<h1 id="安装最新的node">安装最新的node</h1>
<pre><code>nvm install node
</code></pre>
<h1 id="查看nvm目录">查看nvm目录</h1>
<pre><code>nvm root
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端可视化插件方案]]></title>
        <id>https://qin_hu.gitee.io/blog/post/qian-duan-ke-shi-hua-cha-jian-fang-an/</id>
        <link href="https://qin_hu.gitee.io/blog/post/qian-duan-ke-shi-hua-cha-jian-fang-an/">
        </link>
        <updated>2024-02-17T13:31:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="插件">插件</h1>
<h2 id="1-ant-g6">1. ant-g6</h2>
<p>https://antv-g6.gitee.io/zh/examples/gallery</p>
<h2 id="2-highcharts">2. highcharts</h2>
<p>https://www.highcharts.com/demo</p>
<h2 id="3-d3">3. D3</h2>
<p>https://observablehq.com/@d3/gallery?utm_source=d3js-org&amp;utm_medium=nav&amp;utm_campaign=try-observable</p>
<h1 id="实现可视化项目方案">实现可视化项目方案：</h1>
<p>确定是否是大屏（新增入口显示可行性方），设计一个可视化主题，通过可视化插件实现组件部分。</p>
<h1 id="常见的可视化主题">常见的可视化主题：</h1>
<ol>
<li>
<p>嵌入中后台管理边栏显示<br>
<img src="https://qin_hu.gitee.io/blog//post-images/1708178378449.png" alt="" loading="lazy"></p>
</li>
<li>
<p>顶部<br>
<img src="https://qin_hu.gitee.io/blog//post-images/1708178385164.png" alt="" loading="lazy"></p>
</li>
<li>
<p>swiper<br>
<img src="https://qin_hu.gitee.io/blog//post-images/1708178397394.png" alt="" loading="lazy"></p>
</li>
<li>
<p>全局概况<br>
<img src="https://qin_hu.gitee.io/blog//post-images/1708178410351.png" alt="" loading="lazy"></p>
</li>
<li>
<p>数据详情显示<br>
<img src="https://qin_hu.gitee.io/blog//post-images/1708178418067.png" alt="" loading="lazy"></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实现拖拽排序list]]></title>
        <id>https://qin_hu.gitee.io/blog/post/shi-xian-tuo-zhuai-pai-xu-list/</id>
        <link href="https://qin_hu.gitee.io/blog/post/shi-xian-tuo-zhuai-pai-xu-list/">
        </link>
        <updated>2024-02-01T09:03:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="js">js</h1>
<pre><code>function sortable(section, onUpdate) {
    if(!props.list?.length){
        return
    }
    var dragEl, nextEl, newPos, dragGhost;

    let oldPos = [...section.children].map(item =&gt; {
        item.draggable = true
        let pos = document.getElementById(item.id).getBoundingClientRect();
        return pos;
    });

    function _onDragOver(e) {
        console.info('start ', e)
        // debugger
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';

        var target = e.target;
        if (target &amp;&amp; target !== dragEl &amp;&amp; target.nodeName == 'DIV') {
            if (target.classList.contains('inside')) {
                e.stopPropagation();
            } else {
                //getBoundinClientRect contains location-info about the element (relative to the viewport)
                var targetPos = target.getBoundingClientRect();
                //checking that dragEl is dragged over half the target y-axis or x-axis. (therefor the .5)
                var next = (e.clientY - targetPos.top) / (targetPos.bottom - targetPos.top) &gt; .5 || (e.clientX - targetPos.left) / (targetPos.right - targetPos.left) &gt; .5;
                section.insertBefore(dragEl, next &amp;&amp; target.nextSibling || target);

                /*  console.log(&quot;oldPos:&quot; + JSON.stringify(oldPos));
                 console.log(&quot;newPos:&quot; + JSON.stringify(newPos)); */
                /* console.log(newPos.top === oldPos.top ? 'They are the same' : 'Not the same'); */
                console.log(oldPos);
            }
        }
    }

    function _onDragEnd(evt) {
        console.info(evt)
        // debugger
        evt.preventDefault();
        newPos = [...section.children].map(child =&gt; {
            let pos = document.getElementById(child.id).getBoundingClientRect();
            return pos;
        });
        let curList= [...section.children].map(child =&gt; {
            let pos = document.getElementById(child.id);
            return pos.id;
        });
        emit('select',curList)
        dragEl.classList.remove('ghost');
        section.removeEventListener('dragover', _onDragOver, false);
        section.removeEventListener('dragend', _onDragEnd, false);

        nextEl !== dragEl.nextSibling ? onUpdate(dragEl) : false;
    }

    section.addEventListener('dragstart', function (e) {
        dragEl = e.target;
        nextEl = dragEl.nextSibling;
        /* dragGhost = dragEl.cloneNode(true);
        dragGhost.classList.add('hidden-drag-ghost'); */

        /*  document.body.appendChild(dragGhost);
         e.dataTransfer.setDragImage(dragGhost, 0, 0); */

        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('Text', dragEl.textContent);

        section.addEventListener('dragover', _onDragOver, false);
        section.addEventListener('dragend', _onDragEnd, false);

        setTimeout(function () {
            dragEl.classList.add('ghost');
        }, 0)

    });
}
</code></pre>
<h1 id="html">html</h1>
<pre><code>      &lt;section id=&quot;list&quot;&gt;
                &lt;div :id='item.id' class='divRec'  v-for=&quot;(item,index) in list&quot; :key=&quot;item.id&quot;&gt;
                    &lt;div @click=&quot;start&quot; class='inside'&gt;{{ item.value }}&lt;/div&gt;
                &lt;/div&gt;
        &lt;/section&gt;
</code></pre>
<h1 id="css">css</h1>
<pre><code>[draggable] {
    -moz-user-select: none;
    -khtml-user-select: none;
    -webkit-user-select: none;
    user-select: none;
    /* Required to make elements draggable in old WebKit */
    -khtml-user-drag: element;
    -webkit-user-drag: element;
}

    section {
        margin: 0;
        padding: 0;
        list-style: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
        // display: grid;
        // grid-gap: 15px;
        // grid-auto-flow: row dense;
        max-height: 600px;
        overflow-y: scroll;
    }

    .inside {
        background-color:var(--el-color-primary-light-3);
    }

    .divRec {
        cursor: move;
        font-size: 20px;
        background-color: var(--el-color-primary-light-3);
        margin-bottom: 10px;
        padding: 12px 9px;
        grid-area: span 1/span 2;
        color: #fff;
        border-radius: 5px;
    }

    .divQuad {
        cursor: move;
        padding: 35px 20px;
        font-size: 20px;
        background-color: #fff333;

        grid-area: span 1/span 1;
    }

    .divCard {
        cursor: move;
        padding: 35px 20px;
        font-size: 20px;
        background-color: #00ff00;

        grid-area: span 2/span 1;
    }

    .ghost {
        border: 1px dashed #000;
        // background-color: #fff;
    }

    .custom-drag-ghost {
        /* The original cloned element must not take place up in the page and must not be visible */
        position: absolute;
        top: -99999px;
        left: -99999px;
        /* Just for appearance */
        background-color: #edb458;
        border: 1px solid #e8871e;
    }

    .hidden-drag-ghost {
        opacity: 0;
    }

    .transition {
        transition: all 2s ease-out .5s;
        top: 0;
    }
</code></pre>
<iframe width="800" height="500" src="https://codepen.io/retrofuturistic/full/DJWYBv"></iframe>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Yearning Guide - linux搭建数据库审计后台]]></title>
        <id>https://qin_hu.gitee.io/blog/post/yearning-guide-linux-da-jian-shu-ju-ku-shen-ji-hou-tai/</id>
        <link href="https://qin_hu.gitee.io/blog/post/yearning-guide-linux-da-jian-shu-ju-ku-shen-ji-hou-tai/">
        </link>
        <updated>2024-02-01T05:03:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>数据库审计管理，是数据安全规范中不可或缺的一环，通过审计管理我们能够把控、追溯sql执行情况。</p>
<p>我们可以通过yearning来创建用户，设置权限，规定哪些用户可以查询哪个库，哪些用户可以修改哪个库，查询、修改操作需要经过那些人的审批后才能执行，执行完成的SQL修改语句可以进行回退，可以监控追溯到哪些人执行了哪些SQL。</p>
<h1 id="新建一个数据库">新建一个数据库</h1>
<p>使用<code>navicat</code>或者<code>1Panel</code>或者宝塔</p>
<figure data-type="image" tabindex="1"><img src="https://qin_hu.gitee.io/blog//post-images/1706766318073.png" alt="" loading="lazy"></figure>
<h1 id="安装">安装</h1>
<h2 id="1-下载安装包存储在linux系统文件夹">1. 下载安装包存储在linux系统文件夹</h2>
<p>服务器文件系统<code>opt</code>目录下创建<code>yearning</code>文件夹</p>
<p>下载地址 https://github.com/cookieY/Yearning/releases</p>
<h2 id="2-压缩文件夹">2. 压缩文件夹</h2>
<pre><code>cd /opt/yearning
unzip Yearning-v3.1.1-linux-amd64.zip
</code></pre>
<p>得到Yearning文件夹</p>
<h2 id="3-修改配置">3. 修改配置</h2>
<pre><code>cd /opt/yearning
vim conf.toml
</code></pre>
<p>在<code>conf.toml</code>文件中配置数据库</p>
<pre><code>[Mysql]
Db = &quot;Yearning&quot;
Host = &quot;127.0.0.1&quot;
Port = &quot;3306&quot;
Password = &quot;&quot;
User = &quot;root&quot;
</code></pre>
<h2 id="4-执行下载">4. 执行下载</h2>
<pre><code>./Yearning install
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://qin_hu.gitee.io/blog//post-images/1706766584681.png" alt="" loading="lazy"></figure>
<h2 id="5-启动命令">5. 启动命令</h2>
<pre><code>1、使用默认8000端口启动
$ ./Yearning run

2、使用指定端口启动
./Yearning run --push “you ip:you port” --port “your port”

3、放到后台运行
$ nohup ./Yearning run --push “you ip:you port” --port “your port” &gt;&gt; /var/log/yearning.log 2&gt;&amp;1 &amp;
</code></pre>
<p><a href="https://next.yearning.io/">官网下载</a></p>
]]></content>
    </entry>
</feed>